//  const escopo = (escopo)  => {
//     if (escopo === true) {
//       let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//       ifScope = `${ifScope} ' √≥timo, fui utilizada no escopo !`;
//       console.log(ifScope);
//     } else {
//       let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//       console.log(elseScope);
//     }
//     // console.log(` ${ifScope}' o que estou fazendo aqui ? :O`); // Se necess√°rio esta linha pode ser removida.
//   }

//   escopo(true);

// Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
// Copie o c√≥digo abaixo.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];
// // Seu c√≥digo aqui.

// oddsAndEvens.sort((a, b) => a - b)

// console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ

// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let , const , arrow functions , template literals e ternary operator .
// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.

// const fatorial = (n) => {
//   let fator = [];
//   for (let i = 1; i <= n; i += 1) {
//     fator.push(i);
//   }
//   console.log(fator.reduce((a, b) => a * b));
// };
// fatorial(4);

// const factorial = number => number > 1 ? number * factorial(number - 1) : 1;
// console.log(factorial(5));

// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator .


// Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
// Exemplo:
// Copiar

// const longestWord = ("Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu") // retorna 'aconteceu'

// const result = longestWord
//   .match(/\w+/g)
//   .sort((a, b) => b.length - a.length)[0];
  
// console.log(result);

const longestWord = text => text.split(' ').sort((a, b) => b.length - a.length)[0];
console.log(longestWord("Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu")) // retorna 'aconteceu'


// Crie uma p√°gina que contenha:
// Um bot√£o ao qual ser√° associado um event listener ;
// Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
// Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.
// Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1 : Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo:
// String determinada: "Tryber x aqui!"
// Par√¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"
// Um array com escopo global, que √© o escopo do arquivo JS , nesse caso, contendo cinco strings com suas principais skills .
// Fun√ß√£o 2 : Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo: "Tryber x aqui! Minhas cinco principais habilidades s√£o:
// JavaScript;
// HTML; ... #goTrybe".
